const { Test, TestResult, User, Module, Course } = require("../models");

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ ID
exports.getTestById = async (req, res) => {
  try {
    const test = await Test.findByPk(req.params.id);
    if (!test) {
      return res.status(404).json({ message: "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json(test);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ (—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç)
exports.startTest = async (req, res) => {
  try {
    const test = await Test.findByPk(req.params.id);
    if (!test) {
      return res.status(404).json({ message: "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json({ message: "–¢–µ—Å—Ç –Ω–∞—á–∞—Ç", testId: test.id });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

exports.submitTest = async (req, res) => {
  try {
    const test = await Test.findByPk(req.params.id);

    if (!test) {
      return res.status(404).json({ message: "–¢–µ—Å—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã" });
    }

    let { answers } = req.body;

    if (!Array.isArray(answers) || answers.length === 0) {
      return res.status(400).json({ message: "–ñ–∞—É–∞–ø—Ç–∞—Ä –º–∞—Å—Å–∏–≤ —Ç“Ø—Ä—ñ–Ω–¥–µ –±–æ–ª—É—ã –∫–µ—Ä–µ–∫." });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ç–µ—Å—Ç–∞
    const correctAnswers = Array.isArray(test.questions) ? test.questions : [];

    if (correctAnswers.length === 0) {
      return res.status(500).json({ message: "–¢–µ—Å—Ç—Ç—ñ“£ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã –¥“±—Ä—ã—Å –µ–º–µ—Å —Ñ–æ—Ä–º–∞—Ç—Ç–∞." });
    }

    let score = 0;
    let processedAnswers = [];

    answers.forEach(({ questionId, selectedAnswer }) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `questionId` –ø–µ—Ä–µ–¥–∞–Ω –∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
      if (typeof questionId !== "number") {
        console.warn("‚ö† Warning: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç questionId:", questionId);
        return;
      }

      // –ò—â–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ `questionId`
      const questionData = correctAnswers.find((q, index) => index + 1 === questionId); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Ä—è–¥–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤

      if (questionData) {
        const correctAnswer = questionData.correctAnswer || "–ñ–∞—É–∞–ø –±–µ–ª–≥—ñ–ª–µ–Ω–±–µ–≥–µ–Ω";
        const questionText = questionData.question || "–ë–µ–ª–≥—ñ—Å—ñ–∑ —Å“±—Ä–∞“õ";

        if (selectedAnswer === correctAnswer) {
          score += 1;
        }

        processedAnswers.push({
          questionId,
          question: questionText,
          userAnswer: selectedAnswer || "–ñ–∞—É–∞–ø –∂–æ“õ",
          correctAnswer,
        });
      }
    });

    console.log("üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:", processedAnswers);

    // –ü–æ–¥—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    const totalQuestions = correctAnswers.length;
    const finalScore = totalQuestions > 0 ? Math.round((score / totalQuestions) * 100) : 0;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ –≤ –ë–î
    const result = await TestResult.create({
      userId: req.user.id,
      testId: test.id,
      score: finalScore,
      answers: JSON.stringify(processedAnswers), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ JSON
    });

    res.json({ message: "‚úÖ –¢–µ—Å—Ç –Ω”ô—Ç–∏–∂–µ—Å—ñ —Å–∞“õ—Ç–∞–ª–¥—ã", result });
  } catch (error) {
    console.error("‚ùå –¢–µ—Å—Ç—Ç—ñ —Ç–∞–ø—Å—ã—Ä—É –±–∞—Ä—ã—Å—ã–Ω–¥–∞ “õ–∞—Ç–µ:", error);
    res.status(500).json({ message: "–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ", error });
  }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
exports.getTestResults = async (req, res) => {
  try {
    const { id } = req.params; // testId from request
    const userId = req.user.id; // Assuming user is authenticated

    // Find the latest test result for the given test and user
    const latestResult = await TestResult.findOne({
      where: { testId: id, userId },
      order: [["createdAt", "DESC"]], // Sort by newest
    });

    if (!latestResult) {
      return res.status(404).json({ message: "–¢–µ—Å—Ç –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ —Ç–∞–±—ã–ª–º–∞–¥—ã." });
    }

    res.json(latestResult);
  } catch (error) {
    console.error("‚ùå –¢–µ—Å—Ç –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ–Ω –∞–ª—É “õ–∞—Ç–µ—Å—ñ:", error);
    res.status(500).json({ message: "–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ", error });
  }
};

// üìå –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getUserTestHistory = async (req, res) => {
  try {
    const results = await TestResult.findAll({ where: { userId: req.params.userId } });
    res.json(results);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
exports.createTest = async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
    }

    const { courseId, moduleId, questions } = req.body;

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É—Ä—Å
    const course = await Course.findByPk(courseId);
    if (!course) {
      return res.status(404).json({ message: "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–¥—É–ª—å
    const module = await Module.findByPk(moduleId);
    if (!module) {
      return res.status(404).json({ message: "–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
    if (!questions || !Array.isArray(questions)) {
      return res.status(400).json({ message: "–ü–æ–ª–µ 'questions' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º" });
    }

    // üîπ –ù–∞–∑–Ω–∞—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ questionId –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    const formattedQuestions = questions.map((q, index) => ({
      questionId: index + 1, // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º questionId –Ω–∞—á–∏–Ω–∞—è —Å 1
      question: q.question,
      options: q.options,
      correctAnswer: q.correctAnswer
    }));

    // üîπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    const test = await Test.create({ courseId, moduleId, questions: formattedQuestions });

    res.status(201).json({ message: "–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", test });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};



exports.getAllTests = async (req, res) => {
  try {
    const tests = await Test.findAll({
      include: [
        {
          model: Course,
          attributes: ["id", "title"], // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
        },
        {
          model: Module,
          attributes: ["id", "title"], // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
        },
      ],
    });

    res.json(tests);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};


// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
exports.updateTest = async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
    }

    const { id } = req.params;
    const { title, courseId, moduleId, questions } = req.body;

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ—Å—Ç
    const test = await Test.findByPk(id);
    if (!test) {
      return res.status(404).json({ message: "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É—Ä—Å
    if (courseId) {
      const course = await Course.findByPk(courseId);
      if (!course) {
        return res.status(404).json({ message: "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
    }

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–¥—É–ª—å
    if (moduleId) {
      const module = await Module.findByPk(moduleId);
      if (!module) {
        return res.status(404).json({ message: "–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
    }

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
    if (questions && !Array.isArray(questions)) {
      return res.status(400).json({ message: "–ü–æ–ª–µ 'questions' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º" });
    }

    // üîπ –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∞—Ä—ã–µ questionId
    let existingQuestions = Array.isArray(test.questions) ? test.questions : [];

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ questionId
    const formattedQuestions = questions.map((q, index) => {
      const existingQuestion = existingQuestions.find((exQ) => exQ.questionId === q.questionId);
      return existingQuestion
        ? { ...existingQuestion, question: q.question, options: q.options, correctAnswer: q.correctAnswer }
        : { questionId: existingQuestions.length + index + 1, ...q };
    });

    // üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç
    test.title = title || test.title;
    test.courseId = courseId || test.courseId;
    test.moduleId = moduleId || test.moduleId;
    test.questions = formattedQuestions;

    await test.save();

    res.json({ message: "–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", test });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};
