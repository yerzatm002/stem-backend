const { Webinar, User, WebinarRegistration } = require("../models");

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–µ–±–∏–Ω–∞—Ä–æ–≤
exports.getAllWebinars = async (req, res) => {
  try {
    // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ–±–∏–Ω–∞—Ä—ã –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    const webinars = await Webinar.findAll({
      order: [["date", "ASC"]],
    });

    // üìå –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ `instructorId` –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const instructorIds = webinars.map((w) => w.instructorId);
    const instructors = await User.findAll({
      where: { id: instructorIds },
      attributes: ["id", "name", "email"],
    });

    // üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±—ä–µ–∫—Ç `id -> userData`
    const instructorMap = instructors.reduce((acc, user) => {
      acc[user.id] = user;
      return acc;
    }, {});

    // üìå –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∫ –∫–∞–∂–¥–æ–º—É –≤–µ–±–∏–Ω–∞—Ä—É
    const webinarsWithInstructors = webinars.map((webinar) => ({
      ...webinar.toJSON(),
      instructor: instructorMap[webinar.instructorId] || null,
    }));

    res.json(webinarsWithInstructors);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–µ–±–∏–Ω–∞—Ä–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±–∏–Ω–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
exports.createWebinar = async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
    }

    const { title, description, date, link } = req.body;

    const webinar = await Webinar.create({
      title,
      description,
      date,
      link,
      instructorId: req.user.id, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ `hostId` ‚Üí `instructorId`
    });

    res.status(201).json({ message: "–í–µ–±–∏–Ω–∞—Ä —Å–æ–∑–¥–∞–Ω", webinar });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ–±–∏–Ω–∞—Ä–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±–∏–Ω–∞—Ä–µ
exports.getWebinarById = async (req, res) => {
  try {
    // üìå –ò—â–µ–º –≤–µ–±–∏–Ω–∞—Ä –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    const webinar = await Webinar.findByPk(req.params.id);

    if (!webinar) {
      return res.status(404).json({ message: "–í–µ–±–∏–Ω–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ `instructorId`
    const instructor = await User.findByPk(webinar.instructorId, {
      attributes: ["id", "name", "email"],
    });

    res.json({
      ...webinar.toJSON(),
      instructor: instructor || null, // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–¥–∞–µ–º `null`
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ–±–∏–Ω–∞—Ä–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä —á–µ—Ä–µ–∑ `WebinarRegistration`
exports.registerForWebinar = async (req, res) => {
  try {
    const webinar = await Webinar.findByPk(req.params.id);
    if (!webinar) {
      return res.status(404).json({ message: "–í–µ–±–∏–Ω–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingRegistration = await WebinarRegistration.findOne({
      where: { userId: req.user.id, webinarId: webinar.id },
    });

    if (existingRegistration) {
      return res.status(400).json({ message: "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –≤–µ–±–∏–Ω–∞—Ä" });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    await WebinarRegistration.create({
      userId: req.user.id,
      webinarId: webinar.id,
    });

    res.json({ message: "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

exports.deleteWebinar = async (req, res) => {
  try {
    const { id } = req.params;

    const webinar = await Webinar.findByPk(id);
    if (!webinar) {
      return res.status(404).json({ message: "–í–µ–±–∏–Ω–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    await webinar.destroy();
    res.json({ message: "–í–µ–±–∏–Ω–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±–∏–Ω–∞—Ä–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

exports.getWebinarParticipants = async (req, res) => {
  try {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–µ–±–∏–Ω–∞—Ä
    const webinar = await Webinar.findByPk(id);
    if (!webinar) {
      return res.status(404).json({ message: "–í–µ–±–∏–Ω–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä
    const registrations = await WebinarRegistration.findAll({
      where: { webinarId: id },
      attributes: ["userId"], // –¢–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º userId –≤ –º–∞—Å—Å–∏–≤
    const userIds = registrations.map((reg) => reg.userId);

    if (userIds.length === 0) {
      return res.json({ webinarId: id, participants: [] }); // –ï—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö ID
    const participants = await User.findAll({
      where: { id: userIds },
      attributes: ["id", "name", "email"], // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    });

    res.json({ webinarId: id, participants });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–µ–±–∏–Ω–∞—Ä–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

