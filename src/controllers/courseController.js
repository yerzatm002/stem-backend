const { Course, User, Module, Test } = require("../models");

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
exports.getAllCourses = async (req, res) => {
  try {
    const courses = await Course.findAll({
      include: { model: User, as: "instructor", attributes: ["id", "name", "email"] },
    });
    res.json(courses);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
exports.createCourse = async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
    }

    const { title, description, image } = req.body;
    const course = await Course.create({ title, description, image, instructorId: req.user.id });

    res.status(201).json({ message: "–ö—É—Ä—Å —Å–æ–∑–¥–∞–Ω", course });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
exports.getCourseById = async (req, res) => {
  try {
    const course = await Course.findByPk(req.params.id, {
      include: { model: User, as: "instructor", attributes: ["id", "name", "email"] },
    });

    if (!course) {
      return res.status(404).json({ message: "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json(course);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
exports.updateCourse = async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
    }

    const course = await Course.findByPk(req.params.id);
    if (!course) {
      return res.status(404).json({ message: "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const { title, description, image } = req.body;
    course.title = title || course.title;
    course.description = description || course.description;
    course.image = image || course.image;
    await course.save();

    res.json({ message: "–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω", course });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
exports.deleteCourse = async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
    }

    const course = await Course.findByPk(req.params.id);
    if (!course) {
      return res.status(404).json({ message: "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    await course.destroy();
    res.json({ message: "–ö—É—Ä—Å —É–¥–∞–ª–µ–Ω" });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫—É—Ä—Å
exports.enrollInCourse = async (req, res) => {
  try {
    const course = await Course.findByPk(req.params.id);
    if (!course) {
      return res.status(404).json({ message: "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const user = await User.findByPk(req.user.id);
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫—É—Ä—Å
    const completedCourses = user.completedCourses || [];
    if (completedCourses.includes(course.id)) {
      return res.status(400).json({ message: "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å" });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö
    user.completedCourses = [...completedCourses, course.id];
    await user.save();

    res.json({ message: "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å", user });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getUserCourses = async (req, res) => {
  try {
    const user = await User.findByPk(req.params.id, {
      attributes: ["id", "name", "email", "completedCourses"],
    });

    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const courses = await Course.findAll({
      where: { id: user.completedCourses },
    });

    res.json(courses);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

exports.getCourseModules = async (req, res) => {
  try {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É—Ä—Å
    const course = await Course.findByPk(id);
    if (!course) {
      return res.status(404).json({ message: "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∫—É—Ä—Å–æ–º
    const modules = await Module.findAll({
      where: { courseId: id },
      order: [["createdAt", "ASC"]],
    });

    res.json({ courseId: id, modules });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥—É–ª–µ–π –∫—É—Ä—Å–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É
exports.getCourseTests = async (req, res) => {
  try {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É—Ä—Å
    const course = await Course.findByPk(id);
    if (!course) {
      return res.status(404).json({ message: "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // –ò—â–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º –∫—É—Ä—Å–æ–º
    const tests = await Test.findAll({ where: { courseId: id }, include: [
      {
        model: Course,
        attributes: ["id", "title"], 
      },
      {
        model: Module,
        attributes: ["id", "title"],
      },
    ], });

    res.json({ courseId: id, tests });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};