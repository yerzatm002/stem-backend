const { ForumTopic, ForumComment, User } = require("../models");

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π
exports.getAllTopics = async (req, res) => {
  try {
    // üìå –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const topics = await ForumTopic.findAll({
      order: [["createdAt", "DESC"]],
    });

    // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ userId –æ—Ç–¥–µ–ª—å–Ω–æ
    const userIds = topics.map((topic) => topic.userId);
    const users = await User.findAll({
      where: { id: userIds },
      attributes: ["id", "name", "email"],
    });

    // üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±—ä–µ–∫—Ç (id -> userData)
    const userMap = users.reduce((acc, user) => {
      acc[user.id] = user;
      return acc;
    }, {});

    // üìå –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞
    const topicsWithUsers = topics.map((topic) => ({
      ...topic.toJSON(),
      user: userMap[topic.userId] || null,
    }));

    res.json(topicsWithUsers);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º —Ñ–æ—Ä—É–º–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã
exports.createTopic = async (req, res) => {
  try {
    const { title, content } = req.body;

    const topic = await ForumTopic.create({
      title,
      content,
      userId: req.user.id,
    });

    res.status(201).json({ message: "–¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞", topic });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–µ
exports.getTopicById = async (req, res) => {
  try {
    const { id } = req.params;

    // üìå –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const topic = await ForumTopic.findByPk(id);

    if (!topic) {
      return res.status(404).json({ message: "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∞ —Ç–µ–º—ã
    const user = await User.findByPk(topic.userId, {
      attributes: ["id", "name", "email"],
    });

    // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–µ–º—ã
    const comments = await ForumComment.findAll({
      where: { topicId: id },
      order: [["createdAt", "ASC"]], // üìå –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    });

    // üìå –°–æ–±–∏—Ä–∞–µ–º `userId` –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤
    const userIds = [topic.userId, ...comments.map((c) => c.userId)];
    const users = await User.findAll({
      where: { id: userIds },
      attributes: ["id", "name", "email"],
    });

    // üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±—ä–µ–∫—Ç (id -> userData)
    const userMap = users.reduce((acc, user) => {
      acc[user.id] = user;
      return acc;
    }, {});

    // üìå –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∞
    const commentsWithUsers = comments.map((comment) => ({
      ...comment.toJSON(),
      user: userMap[comment.userId] || null,
    }));

    // üìå –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Ç–µ–º—ã
    const topicWithDetails = {
      ...topic.toJSON(),
      user: userMap[topic.userId] || null,
      comments: commentsWithUsers,
    };

    res.json(topicWithDetails);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
exports.addComment = async (req, res) => {
  try {
    const { content } = req.body;

    const topic = await ForumTopic.findByPk(req.params.id);
    if (!topic) {
      return res.status(404).json({ message: "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    const comment = await ForumComment.create({
      content,
      topicId: req.params.id,
      userId: req.user.id,
    });

    res.status(201).json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω", comment });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

exports.deleteForumTopic = async (req, res) => {
  try {
    const { id } = req.params;

    const topic = await ForumTopic.findByPk(id);
    if (!topic) {
      return res.status(404).json({ message: "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    await topic.destroy();
    res.json({ message: "–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

exports.deleteForumComment = async (req, res) => {
  try {
    const { id, commentId } = req.params;

    const comment = await ForumComment.findOne({ where: { id: commentId, topicId: id } });
    if (!comment) {
      return res.status(404).json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    await comment.destroy();
    res.json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};
