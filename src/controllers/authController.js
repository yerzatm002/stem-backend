const { User } = require("../models");
const admin = require("../config/firebase");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const { validationResult } = require("express-validator");

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT
const generateToken = (user) => {
  return jwt.sign({ id: user.id, email: user.email, role: user.role }, process.env.JWT_SECRET, {
    expiresIn: "7d",
  });
};

exports.register = async (req, res) => {
    const { email, password, name } = req.body;
  
    try {
      let user = await User.findOne({ where: { email } });
      if (user) {
        return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
      }
  
      console.log("üöÄ –û–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å:", password);
  
      user = await User.create({
        email,
        password, 
        name,
      });
  
      const token = generateToken(user);
      res.status(201).json({ user, token });
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
  };
  

  exports.login = async (req, res) => {
    const { email, password } = req.body;
  
    try {
      const user = await User.findOne({ where: { email } });
      if (!user) {
        return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
      }
  
      console.log("üîπ –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:", password);
      console.log("üîπ –•—Ä–∞–Ω–∏–º—ã–π –ø–∞—Ä–æ–ª—å:", user.password);
  
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        console.log("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç");
        return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
      }
  
      console.log("‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç");
  
      const token = generateToken(user);
      res.json({ user, token });
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
  };
  

// üìå –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google OAuth
exports.loginWithGoogle = async (req, res) => {
  const { token } = req.body;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ Firebase
    const decodedToken = await admin.auth().verifyIdToken(token);
    const { email, name, picture, uid } = decodedToken;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await User.findOne({ where: { email } });
    if (!user) {
      user = await User.create({ email, uid, name, photo: picture });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT
    const jwtToken = generateToken(user);

    res.json({ user, token: jwtToken });
  } catch (error) {
    res.status(401).json({ message: "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", error });
  }
};

// üìå –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ—Ç JWT)
exports.logout = (req, res) => {
  res.json({ message: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏" });
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getMe = async (req, res) => {
  try {
    const user = await User.findByPk(req.user.id);
    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

exports.resetPassword = async (req, res) => {
    const { email } = req.body;
  
    try {
      const link = await admin.auth().generatePasswordResetLink(email);
      console.log("Reset Link:", link); // üîπ –õ–æ–≥–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
  
      res.json({ message: "–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞" });
    } catch (error) {
      console.error("Firebase Error:", error); // üîπ –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
  };

// üìå –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
exports.changePassword = async (req, res) => {
    const { oldPassword, newPassword } = req.body;
  
    try {
      const user = await User.findByPk(req.user.id);
      console.log("Stored Password:", user.password); // üîπ –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
  
      const isMatch = await bcrypt.compare(oldPassword, user.password);
      if (!isMatch) {
        return res.status(400).json({ message: "–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π" });
      }
  
      user.password = await bcrypt.hash(newPassword, 10);
      await user.save();
  
      res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω" });
    } catch (error) {
        console.log(error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
  };
  

  exports.updateProfile = async (req, res) => {
    try {
      const { name, email, photo } = req.body;
      const userId = req.user.id;
  
      const user = await User.findByPk(userId);
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
  
      if (email && email !== user.email) {
        const existingUser = await User.findOne({ where: { email } });
        if (existingUser) {
          return res.status(400).json({ message: "–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
        }
      }
  
      await user.update({ name, email, photo });
      res.json({ message: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω", user });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
  };
  